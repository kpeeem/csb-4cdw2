{"version":3,"sources":["utils.tsx","Simulate.tsx","hobbies.ts","App.tsx","index.tsx"],"names":["maxSpeed","getRandomInt","min","max","Math","ceil","floor","random","Shape","ctx","x","y","radius","ax","ay","m","title","vx","vy","r","fx","fy","t","circle","fillStyle","fillBorderStyle","isActive","this","Path2D","dt","arc","PI","lineWidth","strokeStyle","stroke","fill","font","textAlign","textBaseline","text","maxWidth","words","split","lines","line","measureText","width","length","tmp","slice","splice","shift","push","fragmentText","entries","i","fragment","fillText","isHover","canvasWidth","canvasHeight","Collision","o1","o2","dx","dy","d","checkCollision","sqrt","collisionInfo","collided","resolveCollisionWithBounce","info","nx","ny","s","k","Simulate","items","onSelect","canvasRef","useRef","canvasElRef","itemsRef","dpr","window","devicePixelRatio","useEffect","canvasEl","current","canvas","rect","getBoundingClientRect","height","getContext","scale","setupCanvas","addEventListener","event","selectedItems","o","isPointInPath","offsetX","offsetY","setActive","setHover","style","cursor","requestAnimationFrame","animate","clearRect","move","resolveEdgeCollision","collisions","j","col","draw","canvasOffsetHeight","offsetHeight","canvasOffsetWidth","offsetWidth","currentItems","map","v","diffRight","filter","includes","diffLeft","round","item","className","ref","id","hobbies","App","useState","leftCursor","rigthCursor","setCursor","console","log","onClick","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.b396ebcf.chunk.js","sourcesContent":["const maxSpeed = 15;\n\nexport function getRandomInt(min: number, max: number) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function setupCanvas(canvas: HTMLCanvasElement, dpr: number) {\n  if (!canvas) return;\n\n  // Get the size of the canvas in CSS pixels.\n  const rect = canvas.getBoundingClientRect();\n  // Give the canvas pixel dimensions of their CSS\n  // size * the device pixel ratio.\n  canvas.width = rect.width * dpr;\n  canvas.height = rect.height * dpr;\n  const ctx = canvas.getContext(\"2d\");\n  // Scale all drawing operations by the dpr, so you\n  // don't have to worry about the difference.\n  if (!ctx) return;\n  ctx.scale(dpr, dpr);\n  return { canvas, ctx, rect };\n}\n\nexport function fragmentText(\n  ctx: CanvasRenderingContext2D,\n  text: string,\n  maxWidth: number\n) {\n  var words = text.split(\" \"),\n    lines = [],\n    line = \"\";\n  if (ctx.measureText(text).width < maxWidth) {\n    return [text];\n  }\n  while (words.length > 0) {\n    var split = false;\n    while (ctx.measureText(words[0]).width >= maxWidth) {\n      var tmp = words[0];\n      words[0] = tmp.slice(0, -1);\n      if (!split) {\n        split = true;\n        words.splice(1, 0, tmp.slice(-1));\n      } else {\n        words[1] = tmp.slice(-1) + words[1];\n      }\n    }\n    if (ctx.measureText(line + words[0]).width < maxWidth) {\n      line += words.shift() + \" \";\n    } else {\n      lines.push(line);\n      line = \"\";\n    }\n    if (words.length === 0) {\n      lines.push(line);\n    }\n  }\n  return lines;\n}\n\n/** Describes object (circle) drawn on canvas and its attributes. */\nexport class Shape {\n  ctx;\n  x: number;\n  y: number;\n  r: number;\n  ax: number;\n  ay: number;\n  m: number;\n  vx: number;\n  vy: number;\n  fx: number;\n  fy: number;\n  t: string;\n  circle: Path2D;\n  fillStyle: string;\n  fillBorderStyle: string;\n  isActive: boolean;\n  constructor(\n    ctx: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    radius: number,\n    ax: number,\n    ay: number,\n    m: number,\n    title: string,\n    vx: number = 0,\n    vy: number = 0\n  ) {\n    this.ctx = ctx;\n    this.x = x;\n    this.y = y;\n    this.r = radius;\n    this.ax = ax;\n    this.ay = ay;\n    this.m = m;\n    this.vx = vx;\n    this.vy = vy;\n    this.fx = 0;\n    this.fy = 0;\n    this.t = title;\n    this.circle = new Path2D();\n    this.fillStyle = \"#373A36\";\n    this.fillBorderStyle = \"#fff\";\n    this.isActive = false;\n  }\n\n  move(dt: number) {\n    this.vx += this.ax * dt;\n    this.vy += this.ay * dt;\n    if (this.vx > maxSpeed) {\n      this.vx = maxSpeed;\n    }\n    if (this.vx < -maxSpeed) {\n      this.vx = -maxSpeed;\n    }\n    if (this.vy > maxSpeed) {\n      this.vy = maxSpeed;\n    }\n    if (this.vy < -maxSpeed) {\n      this.vy = -maxSpeed;\n    }\n    this.x += this.vx * dt;\n    this.y += this.vy * dt;\n  }\n\n  draw() {\n    //draw a circle\n    this.circle = new Path2D();\n    this.ctx.fillStyle = this.fillStyle;\n    this.circle.arc(this.x, this.y, this.r - 8, 0, Math.PI * 2);\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeStyle = this.fillBorderStyle;\n    this.ctx.stroke(this.circle);\n    this.ctx.fill(this.circle);\n\n    this.ctx.fillStyle = \"#fff\";\n    this.ctx.font = `100 ${this.r / 5}px Helvetica`;\n    this.ctx.textAlign = \"center\";\n    this.ctx.textBaseline = \"middle\";\n    for (const [i, fragment] of fragmentText(\n      this.ctx,\n      this.t,\n      this.r * 2 - 8\n    ).entries()) {\n      this.ctx.fillText(fragment, this.x, this.y + i * 20);\n    }\n  }\n\n  setHover(isHover = true) {\n    if (this.isActive) return;\n    if (isHover) {\n      this.fillStyle = \"#FF7043\";\n      this.fillBorderStyle = \"#FF7043\";\n    } else {\n      this.fillStyle = \"#373A36\";\n      this.fillBorderStyle = \"#fff\";\n    }\n  }\n\n  setActive() {\n    if (this.isActive) {\n      this.fillStyle = \"#373A36\";\n      this.fillBorderStyle = \"#fff\";\n      this.r = 50;\n    } else {\n      this.fillStyle = \"#FF7043\";\n      this.fillBorderStyle = \"#FF7043\";\n      this.r = 60;\n    }\n    this.isActive = !this.isActive;\n  }\n\n  resolveEdgeCollision(canvasWidth: number, canvasHeight: number) {\n    // Detect collision with right wall.\n    if (this.x + this.r > canvasWidth) {\n      // Need to know how much we overshot the canvas width so we know how far to 'bounce'.\n      this.x = canvasWidth - this.r;\n      this.vx = -this.vx;\n      this.ax = -this.ax;\n    }\n\n    // Detect collision with bottom wall.\n    else if (this.y + this.r > canvasHeight) {\n      // this.y = c.height - this.r;\n      this.y = canvasHeight + 30 - this.r;\n      this.vy = -this.vy;\n      this.ay = -this.ay;\n    }\n\n    // Detect collision with left wall.\n    else if (this.x - this.r < 0) {\n      this.x = this.r;\n      this.vx = -this.vx;\n      this.ax = -this.ax;\n    }\n    // Detect collision with top wall.\n    else if (this.y - this.r < 0) {\n      this.y = this.r;\n      this.vy = -this.vy;\n      this.ay = -this.ay;\n    }\n  }\n}\n\n/** Object describing collision between 2 objects */\nexport class Collision {\n  o1: Shape;\n  o2: Shape;\n  dx: number;\n  dy: number;\n  d: number;\n  constructor(o1: Shape, o2: Shape, dx: number, dy: number, d: number) {\n    this.o1 = o1;\n    this.o2 = o2;\n    this.dx = dx;\n    this.dy = dy;\n    this.d = d;\n  }\n}\n\nexport function checkCollision(o1: Shape, o2: Shape) {\n  let dx = o2.x - o1.x;\n  let dy = o2.y - o1.y;\n  let d = Math.sqrt(dx ** 2 + dy ** 2);\n  if (d < o1.r + o2.r) {\n    return {\n      collisionInfo: new Collision(o1, o2, dx, dy, d),\n      collided: true\n    };\n  }\n  return {\n    collisionInfo: null,\n    collided: false\n  };\n}\n\nexport function moveWithGravity(dt: number, o: Shape[]) {\n  // \"o\" refers to Array of objects we are moving\n  for (let o1 of o) {\n    // Zero-out accumulator of forces for each object\n    o1.fx = 0;\n    o1.fy = 0;\n  }\n  for (let [i, o1] of o.entries()) {\n    // For each pair of objects...\n    for (let [j, o2] of o.entries()) {\n      if (i < j) {\n        // To not do same pair twice\n        let dx = o2.x - o1.x; // Compute distance between centers of objects\n        let dy = o2.y - o1.y;\n        let r = Math.sqrt(dx ** 2 + dy ** 2);\n        if (r < 1) {\n          // To avoid division by 0\n          r = 1;\n        }\n        let f = (100 * o1.m * o2.m) / r ** 2; // Compute force for this pair\n        let fx = (f * dx) / r; // Break it down\n        let fy = (f * dy) / r;\n        o1.fx += fx; // Accumulate for first object\n        o1.fy += fy;\n        o2.fx -= fx; // And for second object in opposite direction\n        o2.fy -= fy;\n      }\n    }\n  }\n  for (let o1 of o) {\n    // for each object update...\n    let ax = o1.fx / o1.m; // ...acceleration\n    let ay = o1.fy / o1.m;\n\n    o1.vx += ax * dt; // ...speed\n    o1.vy += ay * dt;\n\n    o1.x += o1.vx * dt; // ...position\n    o1.y += o1.vy * dt;\n  }\n}\n\n/** Resolves collision by bouncing objects. */\nexport function resolveCollisionWithBounce(info: Collision) {\n  let nx = info.dx / info.d;\n  let ny = info.dy / info.d;\n  let s = info.o1.r + info.o2.r - info.d;\n  info.o1.x -= (nx * s) / 2;\n  info.o1.y -= (ny * s) / 2;\n  info.o2.x += (nx * s) / 2;\n  info.o2.y += (ny * s) / 2;\n\n  // Magic...\n  let k =\n    (-2 * ((info.o2.vx - info.o1.vx) * nx + (info.o2.vy - info.o1.vy) * ny)) /\n    (1 / info.o1.m + 1 / info.o2.m);\n  info.o1.vx -= (k * nx) / info.o1.m; // Same as before, just added \"k\" and switched to \"m\" instead of \"s/2\"\n  info.o1.vy -= (k * ny) / info.o1.m;\n  info.o2.vx += (k * nx) / info.o2.m;\n  info.o2.vy += (k * ny) / info.o2.m;\n}\n\n// function createShape(event: MouseEvent, radius = 40, mass = 100) {\n//   let x = event.pageX - canvas.offsetLeft;\n//   let y = event.pageY - canvas.offsetTop;\n\n//   itemsRef.current.push(\n//     new Shape(\n//       ctx,\n//       x,\n//       y,\n//       radius,\n//       getRandomInt(-1, 1),\n//       getRandomInt(-1, 1),\n//       mass,\n//       \"new Shape\"\n//     )\n//   );\n// }\n","// https://martinheinz.github.io/physics-visual/\n// https://martinheinz.dev/blog/15\nimport { useRef, useEffect } from \"react\";\nimport {\n  Shape,\n  Collision,\n  setupCanvas,\n  getRandomInt,\n  moveWithGravity,\n  checkCollision,\n  resolveCollisionWithBounce\n} from \"./utils\";\n\ntype Props = {\n  items: string[];\n  onSelect?: (item: string[]) => void;\n};\n\nconst gravity = false;\n\nexport default function Simulate({ items, onSelect }: Props) {\n  const canvasRef = useRef<{\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    rect: DOMRect;\n  }>();\n  const canvasElRef = useRef<HTMLCanvasElement | null>(null);\n  const itemsRef = useRef<Shape[]>([]);\n  // Get the device pixel ratio, falling back to 1.\n  const dpr = window?.devicePixelRatio || 1;\n\n  useEffect(() => {\n    const canvasEl = canvasElRef.current;\n    if (!canvasEl) {\n      return;\n    }\n\n    canvasRef.current = setupCanvas(canvasEl, dpr);\n\n    if (!canvasRef.current) return;\n\n    const { canvas, ctx, rect } = canvasRef.current;\n    const { width: canvasWidth, height: canvasHeight } = rect;\n\n    canvas.addEventListener(\n      \"mousedown\",\n      function (event: MouseEvent) {\n        const selectedItems: string[] = [];\n        for (let o of itemsRef.current) {\n          if (\n            ctx.isPointInPath(\n              o.circle,\n              event.offsetX * dpr,\n              event.offsetY * dpr\n            )\n          ) {\n            o.setActive();\n          }\n          if (o.isActive) {\n            selectedItems.push(o.t);\n          }\n        }\n        onSelect?.(selectedItems);\n        // createShape(event);\n      },\n      false\n    );\n\n    canvas.addEventListener(\"mousemove\", function (event) {\n      for (let o of itemsRef.current) {\n        if (\n          ctx.isPointInPath(o.circle, event.offsetX * dpr, event.offsetY * dpr)\n        ) {\n          o.setHover();\n          canvasEl.style.cursor = \"pointer\";\n        } else {\n          o.setHover(false);\n          canvasEl.style.cursor = \"default\";\n        }\n      }\n    });\n\n    /** This function is ran with every animation frame and each time clears canvas, updates coordinates of all objects,\n     * resolves collisions of objects and edges of canvas , resolves collisions between objects and finally draws all of them. */\n    function animate() {\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n      if (gravity) {\n        moveWithGravity(0.01, itemsRef.current);\n      } else {\n        for (let o of itemsRef.current) {\n          o.move(0.1);\n        }\n      }\n\n      for (let o of itemsRef.current) {\n        o.resolveEdgeCollision(canvasWidth, canvasHeight);\n      }\n\n      let collisions: (Collision | null)[] = [];\n      for (let [i, o1] of itemsRef.current.entries()) {\n        for (let [j, o2] of itemsRef.current.entries()) {\n          if (i < j) {\n            let { collisionInfo, collided } = checkCollision(o1, o2);\n            if (collided) {\n              collisions.push(collisionInfo);\n            }\n          }\n        }\n      }\n\n      for (let col of collisions) {\n        if (col) {\n          resolveCollisionWithBounce(col); // resolveCollision(col)\n        }\n      }\n      for (let o of itemsRef.current) {\n        o.draw();\n      }\n\n      window.requestAnimationFrame(animate);\n    }\n\n    window.requestAnimationFrame(animate);\n  }, [dpr, onSelect]);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    const { canvas, ctx } = canvasRef.current;\n    const {\n      offsetHeight: canvasOffsetHeight,\n      offsetWidth: canvasOffsetWidth\n    } = canvas;\n\n    const currentItems = itemsRef.current.map((v) => v.t);\n\n    // new items\n    const diffRight = items.filter((x) => !currentItems.includes(x));\n    // deleted items\n    const diffLeft = currentItems.filter((x) => !items.includes(x));\n\n    // let rows = 6;\n    let radius = 50;\n    // let startX = Math.round(canvasOffsetWidth / 2);\n    // let startY = Math.round(canvasOffsetHeight / 2);\n    let cols = Math.round(canvasOffsetHeight * 0.25) / radius;\n\n    // console.log({ cols, canvasOffsetHeight, canvasOffsetWidth });\n    for (let [i, item] of diffLeft.entries()) {\n      // setTimeout(() => {\n      itemsRef.current = itemsRef.current.filter((v) => v.t !== item);\n      // }, 70 * i);\n    }\n\n    for (let [i, item] of diffRight.entries()) {\n      // let radius = getRandomInt(36 + 16, 59 + 16);\n      // setTimeout(() => {\n      let x = getRandomInt(radius, canvasOffsetWidth - radius);\n      let y = getRandomInt(radius, canvasOffsetHeight - radius);\n\n      itemsRef.current.push(\n        new Shape(\n          ctx,\n          x,\n          y,\n          radius,\n          0, //getRandomInt(-1, 1),\n          0,\n          radius * 10,\n          item\n        )\n      );\n      // }, 50 * i);\n    }\n  }, [items]);\n\n  return (\n    <div>\n      <canvas\n        width=\"500\"\n        height=\"500\"\n        className=\"canvas\"\n        ref={canvasElRef}\n        id=\"canvas\"\n      />\n    </div>\n  );\n}\n","const hobbies: string[] = [\n  \"3D printing\",\n  \"Acrobatics\",\n  \"Acting\",\n  \"Amateur radio\",\n  \"Animation\",\n  \"Aquascaping\",\n  \"Astrology\",\n  \"Astronomy\",\n  \"Baking\",\n  \"Baton twirling\",\n  \"Blogging\",\n  \"Building\",\n  \"Board/tabletop games\",\n  \"Book discussion clubs\",\n  \"Book restoration\",\n  \"Bowling\",\n  \"Brazilian jiu-jitsu\",\n  \"Breadmaking\",\n  \"Bullet journaling\",\n  \"Cabaret\",\n  \"Calligraphy\",\n  \"Candle making\",\n  \"Candy making\",\n  \"Car fixing & building\",\n  \"Card games\",\n  \"Cheesemaking\",\n  \"Cleaning\",\n  \"Clothesmaking\",\n  \"Coffee roasting\",\n  \"Collecting\",\n  \"Coloring\",\n  \"Computer programming\",\n  \"Confectionery\",\n  \"Cooking\",\n  \"Cosplaying\",\n  \"Couponing\",\n  \"Craft\",\n  \"Creative writing\",\n  \"Crocheting\",\n  \"Cross-stitch\",\n  \"Crossword puzzles\",\n  \"Cryptography\",\n  \"Cue sports\"\n];\n\nexport default hobbies;\n","import { useState, useRef } from \"react\";\nimport \"./styles.css\";\nimport Simulate from \"./Simulate\";\nimport hobbies from \"./hobbies\";\n\nconst portionSize = 20;\n\nexport default function App() {\n  const [[leftCursor, rigthCursor], setCursor] = useState([0, portionSize]);\n  const [active, setActive] = useState<string[]>([]);\n  const activeRef = useRef<string[]>([]);\n  function handleMore() {\n    if (hobbies.length <= rigthCursor) {\n      setCursor([0, portionSize]);\n      return;\n    }\n    setCursor([rigthCursor, rigthCursor + portionSize]);\n  }\n  // function handleAdd(i: number = 1) {\n  //   setCount(count + i);\n  // }\n  // function handleRemove(i: number = 1) {\n  //   setCount(count - i);\n  // }\n  function handleSelect(items: string[]) {\n    // setActive(items);\n  }\n  const items = hobbies.slice(leftCursor, rigthCursor);\n  console.log(items);\n  //Todo: mass on center/drag bubbles/ appear from sides\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1>Select Your Hobbies</h1>\n        <p>Please choose a few things you are interested in.</p>\n      </div>\n      <div className=\"simulate\">\n        <Simulate items={items} onSelect={handleSelect} />\n      </div>\n      <div className=\"controls\">\n        <button onClick={() => handleMore()}>Load more</button>\n        {/* <button onClick={() => handleAdd()}>Add</button> */}\n        {/* <button onClick={() => handleRemove()}>Remove</button> */}\n        {/* <button onClick={() => handleMore(10)}>Load 10</button> */}\n        {/* <button onClick={() => handleRemove(10)}>Remove 10</button> */}\n      </div>\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}